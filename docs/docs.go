// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-02-16 14:31:26.659743 +0900 JST m=+0.037630201

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/areas": {
            "get": {
                "description": "List all areas.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "List all areas.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.ListAreasResponseV1"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/cerr.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/robots": {
            "get": {
                "description": "List all robots and their active cleaning session.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "List all robots and their active cleaning session.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Robot ID to filter on",
                        "name": "robot_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Robot name to filter on",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.ListRobotsResponseV1"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/cerr.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/robots/{robot_id}/history": {
            "get": {
                "description": "Get all historical cleaning sessions for a robot.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get all historical cleaning sessions for a robot.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Robot ID to show history for",
                        "name": "robot_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Return only max latest number of cleaning sessions for robot (default: 10)",
                        "name": "max",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.RobotHistoryResponseV1"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/cerr.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "cerr.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "ok": {
                    "type": "boolean"
                }
            }
        },
        "controller.ListAreasResponseV1": {
            "type": "object",
            "properties": {
                "areas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Area"
                    }
                },
                "ok": {
                    "type": "boolean"
                }
            }
        },
        "controller.ListRobotsResponseV1": {
            "type": "object",
            "properties": {
                "ok": {
                    "type": "boolean"
                },
                "robots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Robot"
                    }
                }
            }
        },
        "controller.RobotHistoryResponseV1": {
            "type": "object",
            "properties": {
                "ok": {
                    "type": "boolean"
                },
                "robot": {
                    "type": "object",
                    "$ref": "#/definitions/entity.Robot"
                }
            }
        },
        "entity.Area": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "dgraph.type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Each cleaning area should definitely have a name to make reports nicer.",
                    "type": "string"
                },
                "passes_needed": {
                    "description": "Number of grid square passes needed before the square can be considered clean.",
                    "type": "integer"
                },
                "size_x": {
                    "description": "X side size in millimeters.",
                    "type": "integer"
                },
                "size_y": {
                    "description": "Y side size in millimeters.",
                    "type": "integer"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "entity.CleaningArea": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "dgraph.type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "grid": {
                    "description": "The size of a grid square. Typically the same size os the diameter of the assigned cleaning robot.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Square"
                    }
                },
                "name": {
                    "description": "Each cleaning area should definitely have a name to make reports nicer.",
                    "type": "string"
                },
                "passes_needed": {
                    "description": "Number of grid square passes needed before the square can be considered clean.",
                    "type": "integer"
                },
                "size_x": {
                    "description": "X side size in millimeters.",
                    "type": "integer"
                },
                "size_y": {
                    "description": "Y side size in millimeters.",
                    "type": "integer"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "entity.CleaningSession": {
            "type": "object",
            "properties": {
                "area": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.CleaningArea"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "dgraph.type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "duration_sec": {
                    "type": "integer"
                },
                "ended_at": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_reported_at": {
                    "type": "string"
                },
                "last_x": {
                    "type": "integer"
                },
                "last_y": {
                    "type": "integer"
                },
                "name": {
                    "description": "Optional.",
                    "type": "string"
                },
                "position_history": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Position"
                    }
                },
                "started_at": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "entity.Position": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "dgraph.type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "passed_at": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "x": {
                    "type": "integer"
                },
                "y": {
                    "type": "integer"
                }
            }
        },
        "entity.Robot": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "dgraph.type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_cleaning": {
                    "type": "boolean"
                },
                "name": {
                    "description": "Each robot should have a name to make identification easier and reports nicer.",
                    "type": "string"
                },
                "session": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.CleaningSession"
                    }
                },
                "size": {
                    "description": "The diameter of the robot in millimeters. We assume all robots are have a circle shape.",
                    "type": "integer"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "entity.Square": {
            "type": "object",
            "properties": {
                "cleaned_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "dgraph.type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "has_robot_present": {
                    "description": "Is the robot currently on the square?",
                    "type": "boolean"
                },
                "order": {
                    "description": "To ensure we can retrieve all grid squares in the order they were created.",
                    "type": "integer"
                },
                "passes": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "uid": {
                    "type": "string"
                },
                "x": {
                    "type": "integer"
                },
                "y": {
                    "type": "integer"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.1",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Robo Viewer API",
	Description: "Robo Viewer API server.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
